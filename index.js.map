{"version":3,"file":"index.js","sources":["node_modules/lodash/isObject.js","node_modules/lodash/isFunction.js","node_modules/lodash/toNumber.js","node_modules/lodash/toInteger.js","node_modules/lodash/internal/baseSlice.js","node_modules/lodash/chunk.js","src/utils/getCurrentTime.js","src/utils/getTime.js","src/index.js"],"sourcesContent":["/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = global.Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array constructors, and\n  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\nmodule.exports = isFunction;\n","var isFunction = require('./isFunction'),\n    isObject = require('./isObject');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `global`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3);\n * // => 3\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3');\n * // => 3\n */\nfunction toNumber(value) {\n  if (isObject(value)) {\n    var other = isFunction(value.valueOf) ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3');\n * // => 3\n */\nfunction toInteger(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  var remainder = value % 1;\n  return value === value ? (remainder ? value - remainder : value) : 0;\n}\n\nmodule.exports = toInteger;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var baseSlice = require('./internal/baseSlice'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=0] The length of each chunk.\n * @returns {Array} Returns the new array containing chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size) {\n  size = nativeMax(toInteger(size), 0);\n\n  var length = array ? array.length : 0;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = -1,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[++resIndex] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n","/**\n * 取当前时间\n */\nexport function getCurrentTime() {\n\treturn (new Date()).getTime();\n}","/**\n * getTime\n */\nexport default function () {\n\tlet d = new Date();\n\treturn d.getHours() + ':' + d.getMinutes() + ':' + d.getMilliseconds();\n};","/**\n * Test demo file\n */\n\nimport moment from 'moment';\nimport chunk from 'lodash/chunk';\nimport {getCurrentTime} from './utils/getCurrentTime.js';\nimport getTime from './utils/getTime.js';\n\n\nconsole.log(moment);\n\nlet DatePick = {\n\tgetCurrentTime() {\n\t\treturn getCurrentTime();\n\t},\n\n\tgetDateFormat() {\n\t\treturn moment().format('L');\n\t},\n\n\tgetTime() {\n\t\treturn getTime();\n\t},\n\n\tgetChunk() {\n\t\treturn chunk(['a', 'b', 'c', 'd'], 2);\n\t}\n};\n\nexport default DatePick;\n"],"names":["getCurrentTime","Date","getTime","d","getHours","getMinutes","getMilliseconds","isObject","value","type","module","exports","isFunction","tag","objectToString","call","funcTag","genTag","require$$0","objectProto","global","Object","prototype","toString","toNumber","other","valueOf","replace","reTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","slice","reIsBadHex","NAN","require$$1","parseInt","toInteger","INFINITY","sign","MAX_INTEGER","remainder","baseSlice","array","start","end","index","length","result","Array","chunk","size","nativeMax","resIndex","nativeCeil","Math","ceil","max","console","log","moment","DatePick","_getCurrentTime","format","_getTime"],"mappings":"0RMGO,QAASA,YACR,GAAKC,OAAQC,0BCAhBC,GAAI,GAAIF,YACLE,GAAEC,WAAa,IAAMD,EAAEE,aAAe,IAAMF,EAAEG,gJPkBtD,QAASC,GAASC,GAGhB,GAAIC,SAAcD,EAClB,SAASA,IAAkB,UAARC,GAA4B,YAARA,GAGzCC,EAAOC,QAAUJ,8ECCjB,QAASK,GAAWJ,GAIlB,GAAIK,GAAMN,EAASC,GAASM,EAAeC,KAAKP,GAAS,EACzD,OAAOK,IAAOG,GAAWH,GAAOI,EApClC,GAAIV,GAAWW,EAGXF,EAAU,oBACVC,EAAS,6BAGTE,EAAcC,EAAOC,OAAOC,UAM5BR,EAAiBK,EAAYI,QA0BjCb,GAAOC,QAAUC,0ECIjB,QAASY,GAAShB,GAChB,GAAID,EAASC,GAAQ,CACnB,GAAIiB,GAAQb,EAAWJ,EAAMkB,SAAWlB,EAAMkB,UAAYlB,CAC1DA,GAAQD,EAASkB,GAAUA,EAAQ,GAAMA,EAE3C,GAAoB,gBAATjB,GACT,MAAiB,KAAVA,EAAcA,GAASA,CAEhCA,GAAQA,EAAMmB,QAAQC,EAAQ,GAC9B,IAAIC,GAAWC,EAAWC,KAAKvB,EAC/B,OAAQqB,IAAYG,EAAUD,KAAKvB,GAC/ByB,EAAazB,EAAM0B,MAAM,GAAIL,EAAW,EAAI,GAC3CM,EAAWJ,KAAKvB,GAAS4B,GAAO5B,EAvDvC,GAAII,GAAayB,EACb9B,EAAWW,EAGXkB,EAAM,IAGNR,EAAS,aAGTO,EAAa,qBAGbL,EAAa,aAGbE,EAAY,cAGZC,EAAeK,QAuCnB5B,GAAOC,QAAUa,0EC5BjB,QAASe,GAAU/B,GACjB,IAAKA,EACH,MAAiB,KAAVA,EAAcA,EAAQ,CAG/B,IADAA,EAAQgB,EAAShB,GACbA,IAAUgC,GAAYhC,KAAWgC,EAAU,CAC7C,GAAIC,GAAgB,EAARjC,EAAY,GAAK,CAC7B,OAAOiC,GAAOC,EAEhB,GAAIC,GAAYnC,EAAQ,CACxB,OAAOA,KAAUA,EAASmC,EAAYnC,EAAQmC,EAAYnC,EAAS,EAxCrE,GAAIgB,GAAWN,EAGXsB,EAAW,EAAI,EACfE,EAAc,sBAuClBhC,GAAOC,QAAU4B,0EClCjB,QAASK,GAAUC,EAAOC,EAAOC,GAC/B,GAAIC,GAAQ,GACRC,EAASJ,EAAMI,MAEP,GAARH,IACFA,GAASA,EAAQG,EAAS,EAAKA,EAASH,GAE1CC,EAAMA,EAAME,EAASA,EAASF,EACpB,EAANA,IACFA,GAAOE,GAETA,EAASH,EAAQC,EAAM,EAAMA,EAAMD,IAAW,EAC9CA,KAAW,CAGX,KADA,GAAII,GAASC,MAAMF,KACVD,EAAQC,GACfC,EAAOF,GAASH,EAAMG,EAAQF,EAEhC,OAAOI,GAGTxC,EAAOC,QAAUiC,0ECJjB,QAASQ,GAAMP,EAAOQ,GACpBA,EAAOC,EAAUf,EAAUc,GAAO,EAElC,IAAIJ,GAASJ,EAAQA,EAAMI,OAAS,CACpC,KAAKA,GAAiB,EAAPI,EACb,QAMF,KAJA,GAAIL,GAAQ,EACRO,EAAW,GACXL,EAASC,MAAMK,EAAWP,EAASI,IAExBJ,EAARD,GACLE,IAASK,GAAYX,EAAUC,EAAOG,EAAQA,GAASK,EAEzD,OAAOH,GAxCT,GAAIN,GAAYP,EACZE,EAAYrB,EAGZsC,EAAaC,KAAKC,KAClBJ,EAAYG,KAAKE,GAsCrBjD,GAAOC,QAAUyC,yDGjCjBQ,SAAQC,IAAIC,EAEZ,IAAIC,oCAEKC,qCAIAF,KAASG,OAAO,+BAIhBC,gCAIAd,IAAO,IAAK,IAAK,IAAK,KAAM"}